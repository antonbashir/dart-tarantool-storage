// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint, unused_field
import 'dart:ffi' as ffi;
import 'package:linux_interactor/interactor/bindings.dart'
    as linux_interactor_bindings;

@ffi.Native<ffi.Void Function(ffi.Pointer<tarantool_box>)>(
    symbol: 'tarantool_initialize_box',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_initialize_box(
  ffi.Pointer<tarantool_box> box,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<tarantool_box>)>(
    symbol: 'tarantool_destroy_box',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_destroy_box(
  ffi.Pointer<tarantool_box> box,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_evaluate', assetId: 'tarantool-bindings', isLeaf: true)
external void tarantool_evaluate(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_call', assetId: 'tarantool-bindings', isLeaf: true)
external void tarantool_call(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_space_iterator',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_iterator(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_space_count',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_count(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_space_length',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_length(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_space_truncate',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_truncate(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_space_put_single',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_put_single(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_space_insert_single',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_insert_single(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_space_update_single',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_update_single(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_space_delete_single',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_delete_single(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_space_put_many',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_put_many(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_space_insert_many',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_insert_many(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_space_update_many',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_update_many(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_space_delete_many',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_delete_many(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_space_upsert',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_upsert(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_space_get', assetId: 'tarantool-bindings', isLeaf: true)
external void tarantool_space_get(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_space_min', assetId: 'tarantool-bindings', isLeaf: true)
external void tarantool_space_min(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_space_max', assetId: 'tarantool-bindings', isLeaf: true)
external void tarantool_space_max(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_space_select',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_select(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_space_id_by_name',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_id_by_name(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_index_iterator',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_index_iterator(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_index_count',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_index_count(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_index_length',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_index_length(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_index_id_by_name',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_index_id_by_name(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_index_get', assetId: 'tarantool-bindings', isLeaf: true)
external void tarantool_index_get(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_index_min', assetId: 'tarantool-bindings', isLeaf: true)
external void tarantool_index_min(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_index_max', assetId: 'tarantool-bindings', isLeaf: true)
external void tarantool_index_max(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_index_select',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_index_select(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_index_update_single',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_index_update_single(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_index_update_many',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_index_update_many(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_iterator_next_single',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_iterator_next_single(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_iterator_next_many',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_iterator_next_many(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_iterator_destroy',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_iterator_destroy(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_free_output_buffer',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_free_output_buffer(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_free_output_port',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_free_output_port(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_free_output_tuple',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_free_output_tuple(
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Bool Function(
            ffi.Pointer<tarantool_configuration>, ffi.Pointer<tarantool_box>)>(
    symbol: 'tarantool_initialize', assetId: 'tarantool-bindings', isLeaf: true)
external bool tarantool_initialize(
  ffi.Pointer<tarantool_configuration> configuration,
  ffi.Pointer<tarantool_box> box,
);

@ffi.Native<ffi.Bool Function()>(
    symbol: 'tarantool_initialized',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external bool tarantool_initialized();

@ffi.Native<ffi.Pointer<ffi.Char> Function()>(
    symbol: 'tarantool_status', assetId: 'tarantool-bindings', isLeaf: true)
external ffi.Pointer<ffi.Char> tarantool_status();

@ffi.Native<ffi.Int Function()>(
    symbol: 'tarantool_is_read_only',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external int tarantool_is_read_only();

@ffi.Native<ffi.Pointer<ffi.Char> Function()>(
    symbol: 'tarantool_initialization_error',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<ffi.Char> tarantool_initialization_error();

@ffi.Native<ffi.Pointer<ffi.Char> Function()>(
    symbol: 'tarantool_shutdown_error',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<ffi.Char> tarantool_shutdown_error();

@ffi.Native<ffi.Bool Function()>(
    symbol: 'tarantool_shutdown', assetId: 'tarantool-bindings', isLeaf: true)
external bool tarantool_shutdown();

@ffi.Native<ffi.Int Function(ffi.Pointer<tarantool_executor_configuration>)>(
    symbol: 'tarantool_executor_initialize',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external int tarantool_executor_initialize(
  ffi.Pointer<tarantool_executor_configuration> configuration,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<tarantool_executor_configuration>)>(
    symbol: 'tarantool_executor_start',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_executor_start(
  ffi.Pointer<tarantool_executor_configuration> configuration,
);

@ffi.Native<ffi.Void Function()>(
    symbol: 'tarantool_executor_stop',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_executor_stop();

@ffi.Native<ffi.Void Function()>(
    symbol: 'tarantool_executor_destroy',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_executor_destroy();

@ffi.Native<ffi.Int Function()>(
    symbol: 'tarantool_executor_descriptor',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external int tarantool_executor_descriptor();

@ffi.Native<
        ffi.Pointer<tarantool_tuple_port_entry_t> Function(
            ffi.Pointer<tarantool_tuple_port_t>)>(
    symbol: 'tarantool_port_first', assetId: 'tarantool-bindings', isLeaf: true)
external ffi.Pointer<tarantool_tuple_port_entry_t> tarantool_port_first(
  ffi.Pointer<tarantool_tuple_port_t> port,
);

@ffi.Native<
        ffi.Pointer<tarantool_tuple_port_entry_t> Function(
            ffi.Pointer<tarantool_tuple_port_entry_t>)>(
    symbol: 'tarantool_port_entry_next',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<tarantool_tuple_port_entry_t> tarantool_port_entry_next(
  ffi.Pointer<tarantool_tuple_port_entry_t> current,
);

@ffi.Native<
        ffi.Pointer<tarantool_tuple_t> Function(
            ffi.Pointer<tarantool_tuple_port_entry_t>)>(
    symbol: 'tarantool_port_entry_tuple',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<tarantool_tuple_t> tarantool_port_entry_tuple(
  ffi.Pointer<tarantool_tuple_port_entry_t> current,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<tarantool_tuple_t>)>(
    symbol: 'tarantool_tuple_size', assetId: 'tarantool-bindings', isLeaf: true)
external int tarantool_tuple_size(
  ffi.Pointer<tarantool_tuple_t> tuple,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Pointer<tarantool_tuple_t>)>(
    symbol: 'tarantool_tuple_data', assetId: 'tarantool-bindings', isLeaf: true)
external ffi.Pointer<ffi.Void> tarantool_tuple_data(
  ffi.Pointer<tarantool_tuple_t> tuple,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<tarantool_factory>,
            ffi.Pointer<tarantool_factory_interactor_memory>)>(
    symbol: 'tarantool_factory_initialize',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external int tarantool_factory_initialize(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<tarantool_factory_interactor_memory> memory,
);

@ffi.Native<
        ffi.Pointer<linux_interactor_bindings.interactor_message> Function(
            ffi.Pointer<tarantool_factory>,
            ffi.Uint32,
            ffi.Pointer<ffi.Char>,
            ffi.Size)>(
    symbol: 'tarantool_space_request_prepare',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<linux_interactor_bindings.interactor_message>
    tarantool_space_request_prepare(
  ffi.Pointer<tarantool_factory> factory1,
  int space_id,
  ffi.Pointer<ffi.Char> tuple,
  int tuple_size,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<tarantool_factory>,
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_space_request_free',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_request_free(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Pointer<linux_interactor_bindings.interactor_message> Function(
            ffi.Pointer<tarantool_factory>,
            ffi.Uint32,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
            ffi.Size)>(
    symbol: 'tarantool_space_count_request_prepare',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<linux_interactor_bindings.interactor_message>
    tarantool_space_count_request_prepare(
  ffi.Pointer<tarantool_factory> factory1,
  int space_id,
  int iterator_type,
  ffi.Pointer<ffi.Char> key,
  int key_size,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<tarantool_factory>,
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_space_count_request_free',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_count_request_free(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Pointer<linux_interactor_bindings.interactor_message> Function(
            ffi.Pointer<tarantool_factory>,
            ffi.Uint32,
            ffi.Pointer<ffi.Char>,
            ffi.Size,
            ffi.Uint32,
            ffi.Uint32,
            ffi.Int)>(
    symbol: 'tarantool_space_select_request_prepare',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<linux_interactor_bindings.interactor_message>
    tarantool_space_select_request_prepare(
  ffi.Pointer<tarantool_factory> factory1,
  int space_id,
  ffi.Pointer<ffi.Char> key,
  int key_size,
  int offset,
  int limit,
  int iterator_type,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<tarantool_factory>,
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_space_select_request_free',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_select_request_free(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Pointer<linux_interactor_bindings.interactor_message> Function(
            ffi.Pointer<tarantool_factory>,
            ffi.Uint32,
            ffi.Pointer<ffi.Char>,
            ffi.Size,
            ffi.Pointer<ffi.Char>,
            ffi.Size)>(
    symbol: 'tarantool_space_update_request_prepare',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<linux_interactor_bindings.interactor_message>
    tarantool_space_update_request_prepare(
  ffi.Pointer<tarantool_factory> factory1,
  int space_id,
  ffi.Pointer<ffi.Char> key,
  int key_size,
  ffi.Pointer<ffi.Char> operations,
  int operations_size,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<tarantool_factory>,
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_space_update_request_free',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_update_request_free(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Pointer<linux_interactor_bindings.interactor_message> Function(
            ffi.Pointer<tarantool_factory>,
            ffi.Uint32,
            ffi.Pointer<ffi.Char>,
            ffi.Size,
            ffi.Pointer<ffi.Char>,
            ffi.Size)>(
    symbol: 'tarantool_space_upsert_request_prepare',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<linux_interactor_bindings.interactor_message>
    tarantool_space_upsert_request_prepare(
  ffi.Pointer<tarantool_factory> factory1,
  int space_id,
  ffi.Pointer<ffi.Char> tuple,
  int tuple_size,
  ffi.Pointer<ffi.Char> operations,
  int operations_size,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<tarantool_factory>,
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_space_upsert_request_free',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_upsert_request_free(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Pointer<linux_interactor_bindings.interactor_message> Function(
            ffi.Pointer<tarantool_factory>,
            ffi.Uint32,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
            ffi.Size)>(
    symbol: 'tarantool_space_iterator_request_prepare',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<linux_interactor_bindings.interactor_message>
    tarantool_space_iterator_request_prepare(
  ffi.Pointer<tarantool_factory> factory1,
  int space_id,
  int type,
  ffi.Pointer<ffi.Char> key,
  int key_size,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<tarantool_factory>,
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_space_iterator_request_free',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_iterator_request_free(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Pointer<linux_interactor_bindings.interactor_message> Function(
            ffi.Pointer<tarantool_factory>,
            ffi.Uint32,
            ffi.Uint32,
            ffi.Pointer<ffi.Char>,
            ffi.Size)>(
    symbol: 'tarantool_index_request_prepare',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<linux_interactor_bindings.interactor_message>
    tarantool_index_request_prepare(
  ffi.Pointer<tarantool_factory> factory1,
  int space_id,
  int index_id,
  ffi.Pointer<ffi.Char> tuple,
  int tuple_size,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<tarantool_factory>,
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_index_request_free',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_index_request_free(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Pointer<linux_interactor_bindings.interactor_message> Function(
            ffi.Pointer<tarantool_factory>,
            ffi.Uint32,
            ffi.Uint32,
            ffi.Pointer<ffi.Char>,
            ffi.Size,
            ffi.Int)>(
    symbol: 'tarantool_index_count_request_prepare',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<linux_interactor_bindings.interactor_message>
    tarantool_index_count_request_prepare(
  ffi.Pointer<tarantool_factory> factory1,
  int space_id,
  int index_id,
  ffi.Pointer<ffi.Char> key,
  int key_size,
  int iterator_type,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<tarantool_factory>,
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_index_count_request_free',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_index_count_request_free(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Pointer<linux_interactor_bindings.interactor_message> Function(
            ffi.Pointer<tarantool_factory>,
            ffi.Uint32,
            ffi.Pointer<ffi.Char>,
            ffi.Size)>(
    symbol: 'tarantool_index_id_request_prepare',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<linux_interactor_bindings.interactor_message>
    tarantool_index_id_request_prepare(
  ffi.Pointer<tarantool_factory> factory1,
  int space_id,
  ffi.Pointer<ffi.Char> name,
  int name_length,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<tarantool_factory>,
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_index_id_request_free',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_index_id_request_free(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Pointer<linux_interactor_bindings.interactor_message> Function(
            ffi.Pointer<tarantool_factory>,
            ffi.Uint32,
            ffi.Uint32,
            ffi.Pointer<ffi.Char>,
            ffi.Size,
            ffi.Pointer<ffi.Char>,
            ffi.Size)>(
    symbol: 'tarantool_index_update_request_prepare',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<linux_interactor_bindings.interactor_message>
    tarantool_index_update_request_prepare(
  ffi.Pointer<tarantool_factory> factory1,
  int space_id,
  int index_id,
  ffi.Pointer<ffi.Char> key,
  int key_size,
  ffi.Pointer<ffi.Char> operations,
  int operations_size,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<tarantool_factory>,
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_index_update_request_free',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_index_update_request_free(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Pointer<linux_interactor_bindings.interactor_message> Function(
            ffi.Pointer<tarantool_factory>,
            ffi.Pointer<ffi.Char>,
            ffi.Size,
            ffi.Pointer<ffi.Char>,
            ffi.Size)>(
    symbol: 'tarantool_call_request_prepare',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<linux_interactor_bindings.interactor_message>
    tarantool_call_request_prepare(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<ffi.Char> function,
  int function_length,
  ffi.Pointer<ffi.Char> input,
  int input_size,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<tarantool_factory>,
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_call_request_free',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_call_request_free(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Pointer<linux_interactor_bindings.interactor_message> Function(
            ffi.Pointer<tarantool_factory>,
            ffi.Pointer<ffi.Char>,
            ffi.Size,
            ffi.Pointer<ffi.Char>,
            ffi.Size)>(
    symbol: 'tarantool_evaluate_request_prepare',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<linux_interactor_bindings.interactor_message>
    tarantool_evaluate_request_prepare(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<ffi.Char> script,
  int script_length,
  ffi.Pointer<ffi.Char> input,
  int input_size,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<tarantool_factory>,
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_evaluate_request_free',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_evaluate_request_free(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Pointer<linux_interactor_bindings.interactor_message> Function(
            ffi.Pointer<tarantool_factory>,
            ffi.Uint32,
            ffi.Uint32,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
            ffi.Size)>(
    symbol: 'tarantool_index_iterator_request_prepare',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<linux_interactor_bindings.interactor_message>
    tarantool_index_iterator_request_prepare(
  ffi.Pointer<tarantool_factory> factory1,
  int space_id,
  int index_id,
  int type,
  ffi.Pointer<ffi.Char> key,
  int key_size,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<tarantool_factory>,
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_index_iterator_request_free',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_index_iterator_request_free(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Pointer<linux_interactor_bindings.interactor_message> Function(
            ffi.Pointer<tarantool_factory>,
            ffi.Uint32,
            ffi.Uint32,
            ffi.Pointer<ffi.Char>,
            ffi.Size,
            ffi.Uint32,
            ffi.Uint32,
            ffi.Int)>(
    symbol: 'tarantool_index_select_request_prepare',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<linux_interactor_bindings.interactor_message>
    tarantool_index_select_request_prepare(
  ffi.Pointer<tarantool_factory> factory1,
  int space_id,
  int index_id,
  ffi.Pointer<ffi.Char> key,
  int key_size,
  int offset,
  int limit,
  int iterator_type,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<tarantool_factory>,
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_index_select_request_free',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_index_select_request_free(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Pointer<linux_interactor_bindings.interactor_message> Function(
            ffi.Pointer<tarantool_factory>, ffi.Uint32, ffi.Uint32)>(
    symbol: 'tarantool_index_id_prepare',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<linux_interactor_bindings.interactor_message>
    tarantool_index_id_prepare(
  ffi.Pointer<tarantool_factory> factory1,
  int space_id,
  int index_id,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<tarantool_factory>,
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_index_id_free',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_index_id_free(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Pointer<linux_interactor_bindings.interactor_message> Function(
            ffi.Pointer<tarantool_factory>, ffi.Pointer<ffi.Char>, ffi.Size)>(
    symbol: 'tarantool_space_id_by_name_prepare',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<linux_interactor_bindings.interactor_message>
    tarantool_space_id_by_name_prepare(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<ffi.Char> name,
  int name_length,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<tarantool_factory>,
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_space_id_by_name_free',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_id_by_name_free(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Pointer<linux_interactor_bindings.interactor_message> Function(
            ffi.Pointer<tarantool_factory>, ffi.Uint32)>(
    symbol: 'tarantool_space_length_prepare',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<linux_interactor_bindings.interactor_message>
    tarantool_space_length_prepare(
  ffi.Pointer<tarantool_factory> factory1,
  int space_id,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<tarantool_factory>,
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_space_length_free',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_length_free(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Pointer<linux_interactor_bindings.interactor_message> Function(
            ffi.Pointer<tarantool_factory>, ffi.Uint32)>(
    symbol: 'tarantool_space_truncate_prepare',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<linux_interactor_bindings.interactor_message>
    tarantool_space_truncate_prepare(
  ffi.Pointer<tarantool_factory> factory1,
  int space_id,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<tarantool_factory>,
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_space_truncate_free',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_truncate_free(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Pointer<linux_interactor_bindings.interactor_message> Function(
            ffi.Pointer<tarantool_factory>, ffi.IntPtr, ffi.Uint32)>(
    symbol: 'tarantool_iterator_next_prepare',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<linux_interactor_bindings.interactor_message>
    tarantool_iterator_next_prepare(
  ffi.Pointer<tarantool_factory> factory1,
  int iterator,
  int count,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<tarantool_factory>,
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_iterator_next_free',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_iterator_next_free(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Pointer<linux_interactor_bindings.interactor_message> Function(
            ffi.Pointer<tarantool_factory>, ffi.IntPtr)>(
    symbol: 'tarantool_iterator_destroy_prepare',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<linux_interactor_bindings.interactor_message>
    tarantool_iterator_destroy_prepare(
  ffi.Pointer<tarantool_factory> factory1,
  int iterator,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<tarantool_factory>,
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_iterator_destroy_free',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_iterator_destroy_free(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Pointer<linux_interactor_bindings.interactor_message> Function(
            ffi.Pointer<tarantool_factory>, ffi.Pointer<ffi.Void>, ffi.Size)>(
    symbol: 'tarantool_free_output_buffer_prepare',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<linux_interactor_bindings.interactor_message>
    tarantool_free_output_buffer_prepare(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<ffi.Void> buffer,
  int buffer_size,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<tarantool_factory>,
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_free_output_buffer_free',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_free_output_buffer_free(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Pointer<linux_interactor_bindings.interactor_message> Function(
            ffi.Pointer<tarantool_factory>,
            ffi.Pointer<tarantool_tuple_port_t>)>(
    symbol: 'tarantool_free_output_port_prepare',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<linux_interactor_bindings.interactor_message>
    tarantool_free_output_port_prepare(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<tarantool_tuple_port_t> port,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<tarantool_factory>,
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_free_output_port_free',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_free_output_port_free(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Pointer<linux_interactor_bindings.interactor_message> Function(
            ffi.Pointer<tarantool_factory>, ffi.Pointer<tarantool_tuple_t>)>(
    symbol: 'tarantool_free_output_tuple_prepare',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<linux_interactor_bindings.interactor_message>
    tarantool_free_output_tuple_prepare(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<tarantool_tuple_t> tuple,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<tarantool_factory>,
            ffi.Pointer<linux_interactor_bindings.interactor_message>)>(
    symbol: 'tarantool_free_output_tuple_free',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_free_output_tuple_free(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<linux_interactor_bindings.interactor_message> message,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<tarantool_factory>, ffi.Size)>(
    symbol: 'tarantool_create_string',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<ffi.Char> tarantool_create_string(
  ffi.Pointer<tarantool_factory> factory1,
  int size,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<tarantool_factory>, ffi.Pointer<ffi.Char>, ffi.Size)>(
    symbol: 'tarantool_free_string',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_free_string(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<ffi.Char> string,
  int size,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<tarantool_factory>)>(
    symbol: 'tarantool_factory_destroy',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_factory_destroy(
  ffi.Pointer<tarantool_factory> factory1,
);

final class tarantool_box extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_evaluate_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_call_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_iterator_next_single_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_iterator_next_many_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_iterator_destroy_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_free_output_buffer_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_space_id_by_name_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_space_count_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_space_length_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_space_iterator_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_space_insert_single_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_space_insert_many_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_space_put_single_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_space_put_many_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_space_delete_single_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_space_delete_many_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_space_update_single_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_space_update_many_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_space_get_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_space_min_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_space_max_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_space_truncate_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_space_upsert_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_index_count_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_index_length_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_index_iterator_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_index_get_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_index_max_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_index_min_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_index_update_single_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_index_update_many_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_index_select_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor_bindings.interactor_message>)>>
      tarantool_index_id_by_name_address;
}

final class tarantool_space_request extends ffi.Struct {
  @ffi.Size()
  external int tuple_size;

  external ffi.Pointer<ffi.Char> tuple;

  @ffi.Uint32()
  external int space_id;
}

final class tarantool_space_count_request extends ffi.Struct {
  @ffi.Size()
  external int key_size;

  external ffi.Pointer<ffi.Char> key;

  @ffi.Uint32()
  external int space_id;

  @ffi.Int()
  external int iterator_type;
}

final class tarantool_space_select_request extends ffi.Struct {
  @ffi.Size()
  external int key_size;

  external ffi.Pointer<ffi.Char> key;

  @ffi.Uint32()
  external int space_id;

  @ffi.Uint32()
  external int offset;

  @ffi.Uint32()
  external int limit;

  @ffi.Int()
  external int iterator_type;
}

final class tarantool_space_update_request extends ffi.Struct {
  @ffi.Size()
  external int key_size;

  @ffi.Size()
  external int operations_size;

  external ffi.Pointer<ffi.Char> key;

  external ffi.Pointer<ffi.Char> operations;

  @ffi.Uint32()
  external int space_id;
}

final class tarantool_space_upsert_request extends ffi.Struct {
  @ffi.Size()
  external int tuple_size;

  external ffi.Pointer<ffi.Char> tuple;

  external ffi.Pointer<ffi.Char> operations;

  @ffi.Size()
  external int operations_size;

  @ffi.Uint32()
  external int space_id;
}

final class tarantool_space_iterator_request extends ffi.Struct {
  @ffi.Size()
  external int key_size;

  external ffi.Pointer<ffi.Char> key;

  @ffi.Uint32()
  external int space_id;

  @ffi.Int()
  external int type;
}

final class tarantool_index_request extends ffi.Struct {
  @ffi.Size()
  external int tuple_size;

  external ffi.Pointer<ffi.Char> tuple;

  @ffi.Uint32()
  external int space_id;

  @ffi.Uint32()
  external int index_id;
}

final class tarantool_index_count_request extends ffi.Struct {
  @ffi.Size()
  external int key_size;

  external ffi.Pointer<ffi.Char> key;

  @ffi.Uint32()
  external int space_id;

  @ffi.Uint32()
  external int index_id;

  @ffi.Int()
  external int iterator_type;
}

final class tarantool_index_id_request extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  @ffi.Size()
  external int name_length;

  @ffi.Uint32()
  external int space_id;
}

final class tarantool_index_update_request extends ffi.Struct {
  external ffi.Pointer<ffi.Char> key;

  @ffi.Size()
  external int key_size;

  external ffi.Pointer<ffi.Char> operations;

  @ffi.Size()
  external int operations_size;

  @ffi.Uint32()
  external int space_id;

  @ffi.Uint32()
  external int index_id;
}

final class tarantool_call_request extends ffi.Struct {
  external ffi.Pointer<ffi.Char> function;

  external ffi.Pointer<ffi.Char> input;

  @ffi.Size()
  external int input_size;

  @ffi.Uint32()
  external int function_length;
}

final class tarantool_evaluate_request extends ffi.Struct {
  external ffi.Pointer<ffi.Char> expression;

  external ffi.Pointer<ffi.Char> input;

  @ffi.Size()
  external int input_size;

  @ffi.Uint32()
  external int expression_length;
}

final class tarantool_index_iterator_request extends ffi.Struct {
  external ffi.Pointer<ffi.Char> key;

  @ffi.Size()
  external int key_size;

  @ffi.Uint32()
  external int space_id;

  @ffi.Uint32()
  external int index_id;

  @ffi.Int()
  external int type;
}

final class tarantool_index_select_request extends ffi.Struct {
  external ffi.Pointer<ffi.Char> key;

  @ffi.Size()
  external int key_size;

  @ffi.Uint32()
  external int space_id;

  @ffi.Uint32()
  external int index_id;

  @ffi.Uint32()
  external int offset;

  @ffi.Uint32()
  external int limit;

  @ffi.Int()
  external int iterator_type;
}

final class tarantool_index_id extends ffi.Struct {
  @ffi.Uint32()
  external int space_id;

  @ffi.Uint32()
  external int index_id;
}

final class tarantool_native_module_request extends ffi.Struct {
  external ffi.Pointer<ffi.Char> module_name;

  @ffi.Size()
  external int module_name_length;
}

final class tarantool_native_function_request extends ffi.Struct {
  external ffi.Pointer<ffi.Char> module_name;

  external ffi.Pointer<ffi.Char> function_name;

  @ffi.Size()
  external int module_name_length;
}

final class tarantool_configuration extends ffi.Struct {
  external ffi.Pointer<ffi.Char> initial_script;

  external ffi.Pointer<ffi.Char> library_path;

  external ffi.Pointer<ffi.Char> binary_path;

  @ffi.Uint64()
  external int cqe_wait_timeout_millis;

  @ffi.Size()
  external int quota_size;

  @ffi.Size()
  external int preallocation_size;

  @ffi.Size()
  external int slab_size;

  @ffi.Size()
  external int static_buffers_capacity;

  @ffi.Size()
  external int static_buffer_size;

  @ffi.Size()
  external int ring_size;

  @ffi.Uint64()
  external int initialization_timeout_seconds;

  @ffi.Uint64()
  external int shutdown_timeout_seconds;

  @ffi.Size()
  external int box_output_buffer_capacity;

  @ffi.Size()
  external int executor_ring_size;

  @ffi.Int32()
  external int ring_flags;

  @ffi.Uint32()
  external int cqe_wait_count;

  @ffi.Uint32()
  external int cqe_peek_count;
}

final class tarantool_executor_configuration extends ffi.Struct {
  @ffi.Size()
  external int executor_ring_size;

  external ffi.Pointer<tarantool_configuration> configuration;

  @ffi.Uint32()
  external int interactor_id;
}

final class tuple extends ffi.Opaque {}

final class port extends ffi.Opaque {}

final class tuple_iterator extends ffi.Opaque {}

final class port_c_entry extends ffi.Opaque {}

typedef tarantool_tuple_port_entry_t = port_c_entry;
typedef tarantool_tuple_port_t = port;
typedef tarantool_tuple_t = tuple;

final class mempool extends ffi.Opaque {}

final class small_alloc extends ffi.Opaque {}

final class tarantool_factory extends ffi.Struct {
  external ffi.Pointer<tarantool_factory_small_alloc> tarantool_datas;

  external ffi.Pointer<tarantool_factory_mempool> tarantool_messages;

  external ffi.Pointer<tarantool_factory_mempool> tarantool_call_requests;

  external ffi.Pointer<tarantool_factory_mempool> tarantool_evaluate_requests;

  external ffi.Pointer<tarantool_factory_mempool> tarantool_space_requests;

  external ffi.Pointer<tarantool_factory_mempool>
      tarantool_space_count_requests;

  external ffi.Pointer<tarantool_factory_mempool>
      tarantool_space_select_requests;

  external ffi.Pointer<tarantool_factory_mempool>
      tarantool_space_update_requests;

  external ffi.Pointer<tarantool_factory_mempool>
      tarantool_space_upsert_requests;

  external ffi.Pointer<tarantool_factory_mempool>
      tarantool_space_iterator_requests;

  external ffi.Pointer<tarantool_factory_mempool> tarantool_index_requests;

  external ffi.Pointer<tarantool_factory_mempool>
      tarantool_index_count_requests;

  external ffi.Pointer<tarantool_factory_mempool> tarantool_index_id_requests;

  external ffi.Pointer<tarantool_factory_mempool>
      tarantool_index_update_requests;

  external ffi.Pointer<tarantool_factory_mempool>
      tarantool_index_iterator_requests;

  external ffi.Pointer<tarantool_factory_mempool>
      tarantool_index_select_requests;

  external ffi.Pointer<tarantool_factory_mempool> tarantool_index_index_ids;
}

typedef tarantool_factory_small_alloc = small_alloc;
typedef tarantool_factory_mempool = mempool;
typedef tarantool_factory_interactor_memory
    = linux_interactor_bindings.interactor_memory;
